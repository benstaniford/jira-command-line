#!/usr/bin/python
#scriptdoc: title="Gather stats about the last two weeks", tags="bt,work,jira"
import json
import argparse
import sys
import time
import os
from MyJira import MyJira
from MyGit import MyGit
from MyGithub import MyGithub
from MyJiraConfig import MyJiraConfig

# Load the config
config_file = MyJiraConfig()
if not config_file.exists():
    print("Configuration file not found, generating template...")
    print("Please edit the configuration file and generate required PAT tokens for jira and github")
    config_file.generate_template()
    print(f"Configuration file saved to: {config_file.get_location()}")
    input("Press any key to exit...")
    quit()
config = config_file.load()

# Global variables
jira = MyJira(config.get('jira'))
mygit = MyGit(config.get('git'))
mygithub = MyGithub(config.get('github')) if config.get('github')['token'] != "" else None
parser = argparse.ArgumentParser()
parser.add_argument("-c", "--csv", help="Output in CSV format")
args = parser.parse_args()
csvFile = args.csv
time_now = time.strftime("%d/%m/%Y %H:%M:%S")

def subtask_being_worked_on(subtask):
    in_progress_states = ["In Progress", "Development", "Testing"]
    if subtask.fields.status.name in in_progress_states:
        return True
    return False

def print_csv(line):
    if csvFile:
        if not os.path.isfile(csvFile):
            with open(csvFile, 'a') as f:
                f.write("Time,Assignee,Task,Task Summary,Task State,Issue,Issue Summary,Issue State\n")
        with open(csvFile, 'a') as f:
            f.write(line + '\n')

def print_working_list(working_list):
    for item in working_list:
        (assignee, task, task_summary, task_state, issue, issue_summary, issue_state) = item
        print(f"{assignee} is working on {task}, state:{task_state} - {task_summary}")
        print(f"  {issue} - {issue_summary}\n")
        print_csv(f"{time_now},{assignee},{task},{task_summary},{task_state},{issue},{issue_summary},{issue_state}")

def check_for_problems(working_list):
    problems = []

    # Check that a person isn't working on more than one task
    working_on = {}
    for item in working_list:
        (assignee, task, task_summary, task_state, issue, issue_summary, issue_state) = item
        if assignee in working_on:
            working_on[assignee].append(task)
        else:
            working_on[assignee] = [task]
    for key in working_on:
        if len(working_on[key]) > 1:
            problems.append(f"{key} is working on multiple tasks: {working_on[key]}")
    return problems

def main():
    working_list = []
    sprint = jira.get_sprint_issues()
    for issue in sprint:
        subtasks = issue.fields.subtasks
        for subtask in subtasks:
            subtask_issue = jira.get_issue_by_key(subtask.key)
            assignee = jira.get_assignee(subtask_issue) if subtask_issue.fields.assignee is not None else "Noone"
            if subtask_being_worked_on(subtask_issue):
                working_list.append((assignee, subtask.key, subtask.fields.summary, subtask_issue.fields.status.name, issue.key, issue.fields.summary, issue.fields.status.name))
    print_working_list(working_list)
    problems = check_for_problems(working_list)
    if len(problems) > 0:
        print("Problems found:")
        for problem in problems:
            print(f"  {problem}")

if __name__ == "__main__":
    main()

