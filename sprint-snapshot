#!/usr/bin/python3

#scriptdoc: title="Gather stats about the last two weeks", tags="bt,work,jira"
import json
import argparse
import sys
import time
import os
from MyJira import MyJira
from MyGit import MyGit
from MyGithub import MyGithub
from MyJiraConfig import MyJiraConfig
from MyEmail import MyEmail

# Load the config
config_file = MyJiraConfig()
if not config_file.exists():
    print("Configuration file not found, generating template...")
    print("Please edit the configuration file and generate required PAT tokens for jira and github")
    config_file.generate_template()
    print(f"Configuration file saved to: {config_file.get_location()}")
    input("Press any key to exit...")
    quit()
config = config_file.load()

# Global variables
jira = MyJira(config.get('jira'))
mygit = MyGit(config.get('git'))
mygithub = MyGithub(config.get('github')) if config.get('github')['token'] != "" else None
parser = argparse.ArgumentParser()
parser.add_argument("-c", "--csv", help="Output in CSV format")
parser.add_argument("-e", "--email", help="Email the report to this address")
args = parser.parse_args()
csvFile = args.csv
time_now = time.strftime("%d/%m/%Y %H:%M:%S")

def subtask_being_worked_on(subtask):
    in_progress_states = ["In Progress", "Development", "Testing"]
    if subtask.fields.status.name in in_progress_states:
        return True
    return False

def print_csv(time_now, assignee, task, task_summary, task_state, issue, issue_summary, issue_state):
    if csvFile:
        if not os.path.isfile(csvFile):
            with open(csvFile, 'a') as f:
                f.write("Time,Assignee,Task,Task Summary,Task State,Issue,Issue Summary,Issue State\n")
        with open(csvFile, 'a') as f:
            task_summary = task_summary.replace(',', '.')
            issue_summary = issue_summary.replace(',', '.')
            line = f"{time_now},{assignee},{task},{task_summary},{task_state},{issue},{issue_summary},{issue_state}"
            f.write(line + '\n')

def get_summary(working_list):
    summary = ""
    for item in working_list:
        (assignee, assignee_email, task, task_summary, task_state, issue, issue_summary, issue_state) = item
        summary += f"{assignee} is working on {task}, state:{task_state} - {task_summary}\r\n"
        summary += f"  {issue} - {issue_summary}\r\n\r\n"
        print_csv(time_now, assignee, task, task_summary, task_state, issue, issue_summary, issue_state)
    return summary

def check_for_people_problems(working_list):
    problems = []

    # Check that a person isn't working on more than one task
    working_on = {}
    for item in working_list:
        (assignee, assignee_email, task, task_summary, task_state, issue, issue_summary, issue_state) = item
        if assignee_email in working_on:
            working_on[assignee_email].append(task)
        else:
            working_on[assignee_email] = [task]
    for key in working_on:
        if len(working_on[key]) > 1:
            problems.append(f"{key} is working on multiple tasks: {working_on[key]}")

    # Check that everyone is working on a task
    shortnames_to_email = jira.get_user_shortname_to_id()
    email_to_shortnames = {v: k for k, v in shortnames_to_email.items()}
    for assignee in email_to_shortnames.keys():
        if assignee not in working_on:
            if assignee != None and assignee != "":
                problems.append(f"{assignee} is not working on a task")

    return problems

def check_for_sprint_problems(working_list, sprint, all_subtasks):
    problems = []
    # Check that every item in the sprint has a task if it is in progress
    in_progress_states = ["In Progress", "Development", "Testing"]
    wip_count = 0
    for issue in sprint:
        if issue.fields.status.name in in_progress_states:
            wip_count += 1
            subtasks = issue.fields.subtasks
            found = False
            for subtask in subtasks:
                for asubtask in all_subtasks:
                    if subtask.key == asubtask.key and subtask_being_worked_on(asubtask):
                        found = True
                        break
            if not found:
                problems.append(f"{issue.key} is in progress but has no subtask that's in progress")
            if issue.fields.assignee is not None:
                assignee = jira.get_assignee(issue)
                if (len(subtasks) != 0):
                    problems.append(f"{assignee} is assigned to parent item {issue.key} where there are subtasks assigned")

    if wip_count > 4:
        problems.append(f"Too many items in the sprint: {wip_count} when the WIP is 4")

    return problems

def main():
    email = MyEmail()
    working_list = []
    all_subtasks = []
    sprint = jira.get_sprint_issues()
    for issue in sprint:
        subtasks = issue.fields.subtasks
        for subtask in subtasks:
            subtask_issue = jira.get_issue_by_key(subtask.key)
            all_subtasks.append(subtask_issue)
            assignee = jira.get_assignee(subtask_issue) if subtask_issue.fields.assignee is not None else "Noone"
            assignee_email = subtask_issue.fields.assignee.emailAddress if subtask_issue.fields.assignee is not None else None 
            if subtask_being_worked_on(subtask_issue):
                working_list.append((assignee, assignee_email, subtask.key, subtask.fields.summary, subtask_issue.fields.status.name, issue.key, issue.fields.summary, issue.fields.status.name))
    problems = check_for_people_problems(working_list)
    problems += check_for_sprint_problems(working_list, sprint, all_subtasks)

    summary = "Sprint Summary\r\n\r\n"
    summary += get_summary(working_list)

    if len(problems) > 0:
        problem_msg = f"Problems found: {len(problems)}\r\n\r\n"
        for problem in problems:
            problem_msg += f"  {problem}\r\n"
        print(problem_msg)
        if args.email:
            email.send(args.email, f"Sparklemuffin: {len(problems)} sprint problems found", problem_msg + "\r\n" + summary)

    print (summary)

if __name__ == "__main__":
    main()

