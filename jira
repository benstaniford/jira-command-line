#!/usr/bin/python
#scriptdoc: title="Curses based Jira team backlog/sprint", tags="bt,work,jira"
import curses
import json
import argparse
import os
import threading
import tempfile
import time
import webbrowser
from MyJira import MyJira
from MyJiraIssue import MyJiraIssue
from MyGit import MyGit
from MyGithub import MyGithub
from MyJiraConfig import MyJiraConfig
from CursesTableView import CursesTableView
from JiraXrayIssue import JiraXrayIssue
#from JiraTextIssue import JiraTextIssue
from MyPlotter import MyPlotter
from view_mode import ViewMode
from command_registry import CommandRegistry

# Load the config
config_file = MyJiraConfig()
if not config_file.exists():
    print("Configuration file not found, generating template...")
    print("Please edit the configuration file and generate required PAT tokens for jira and github")
    config_file.generate_template()
    print(f"Configuration file saved to: {config_file.get_location()}")
    input("Press any key to exit...")
    quit()
config = config_file.load()

# Global variables
jira = MyJira(config.get('jira'))
mygit = MyGit(config.get('git'))
mygithub = MyGithub(config.get('github')) if config.get('github')['token'] != "" else None
parser = argparse.ArgumentParser()
parser.add_argument("-s", "--sprint", help="Start in sprint mode", action="store_true")
parser.add_argument("-l", "--backlog", help="Start in backlog mode", action="store_true")
parser.add_argument("-B", "--board", help="Start in board mode, takes an index of the board to show", type=int)
parser.add_argument("-z", "--escalations", help="Start in escalations mode", action="store_true")
parser.add_argument("-w", "--windows-shared", help="Start in windows-shared mode", action="store_true")
args = parser.parse_args()

class JiraTableView:
    def __init__(self, ui):
        self.ui = ui
        self.parent_issue = ()
        self.mode = ViewMode.BACKLOG
        self.__previous_issues = () 
        self.__previous_mode = self.mode
        self.__current_issues = ()
        self.extra_columns = {}

    # Rebuilds the view based, adding any extra columns
    def rebuild(self, extra_columns={}):
        self.extra_columns = extra_columns
        self.__build(self.__current_issues)

    # Rebuilds the view based on the previous mode, i.e. When going from task view back to the parent view
    def previous(self):
        self.mode = self.__previous_mode
        self.__current_issues = self.__previous_issues
        self.rebuild()

    # Refresh the view with new Jira data, optionally with a new mode, a parent issue must be specified if mode is TASKVIEW
    # params may be specified for SEARCH mode
    def refresh(self, new_mode = None, params = None, parent_issue = None):
        self.parent_issue = parent_issue if parent_issue != None or self.mode != ViewMode.TASKVIEW else self.parent_issue
        self.__previous_mode = self.mode
        self.mode = new_mode if new_mode != None else self.mode

        self.ui.prompt("Fetching issues...", "")
        if self.mode == ViewMode.BACKLOG:
            self.__current_issues = self.__build(jira.get_backlog_issues())
        elif self.mode == ViewMode.SPRINT:
            self.__current_issues = self.__build(jira.get_sprint_issues())
        elif self.mode == ViewMode.ESCALATIONS:
            self.__current_issues = self.__build(jira.get_escalation_issues())
        elif self.mode == ViewMode.WINDOWS_SHARED:
            self.__current_issues = self.__build(jira.get_windows_backlog_issues())
        elif self.mode == ViewMode.SEARCH:
            self.__current_issues = self.__build(jira.search_for_issue(params))
        elif self.mode == ViewMode.TASKVIEW:
            self.__current_issues = self.__build(jira.get_sub_tasks(self.parent_issue))
        elif self.mode == ViewMode.BOARD:
            self.__current_issues = self.__build(jira.get_board_issues(params))

        self.__previous_issues = self.__current_issues if self.mode != ViewMode.TASKVIEW else self.__previous_issues

    # Clear the UI and rebuild the view based on the specified issues list, can optionally enable extra columns
    def __build(self, issues):
        self.ui.clear()
        optional_fields = jira.get_optional_fields()
        extra_columns = self.extra_columns.copy()

        header = ['Key', 'Summary', 'Status']
        if self.mode == ViewMode.SPRINT and extra_columns.get('Points') == None:
            extra_columns['Points'] = optional_fields['Points']
        if self.mode == ViewMode.TASKVIEW and extra_columns.get('Assignee') == None:
            extra_columns['Assignee'] = optional_fields['Assignee']
        if len(extra_columns) > 0:
            header.extend(extra_columns.keys())
        self.ui.add_header(header)

        for issue in issues:
            added_fields = []
            if len(extra_columns) > 0:
                for col_lambda in extra_columns.values():
                    added_fields.append(col_lambda(issue))
            cells = [issue.key, issue.fields.summary, issue.fields.status.name]
            cells.extend(added_fields)
            subtasks = issue.fields.subtasks
            subtask_list = []
            for subtask in subtasks:
                subcells = [subtask.key, subtask.fields.summary, subtask.fields.status.name]
                subtask_list.append((subcells, subtask))
            self.ui.add_row(cells, issue, subtask_list)

        self.ui.draw()

        return issues

def main(stdscr):
    ui = CursesTableView(stdscr)
    ui.set_header_color(curses.COLOR_RED)
    ui.set_column_colors([curses.COLOR_RED, curses.COLOR_CYAN, curses.COLOR_YELLOW, curses.COLOR_BLUE, curses.COLOR_GREEN, curses.COLOR_MAGENTA, curses.COLOR_CYAN, curses.COLOR_YELLOW, curses.COLOR_BLUE, curses.COLOR_GREEN, curses.COLOR_MAGENTA])
    ui.enable_row_numbers()
    view = JiraTableView(ui)

    # Initialize command registry
    command_registry = CommandRegistry()

    board = None
    if args.board:
        board = jira.get_boards()[args.board]

    # Get the backlog issues
    view.refresh(ViewMode.SPRINT if args.sprint
                 else ViewMode.ESCALATIONS if args.escalations
                 else ViewMode.WINDOWS_SHARED if args.windows_shared
                 else ViewMode.BOARD if args.board
                 else ViewMode.BACKLOG, params=board if args.board else None)

    # Column sort f-keys
    possible_columns = jira.get_optional_fields()
    fkey_to_column = {}
    for i, possible_column in enumerate(possible_columns):
        fkey_to_column[f"F{i+2}"] = possible_column
    fkey_string = ''.join([f"{key}:{value.lower()} " for key, value in fkey_to_column.items()])

    # Get available shortcuts from command registry (only single-character ones for UI)
    key_shortcuts = command_registry.get_single_char_shortcuts()
    
    # Keyboard input loop
    while True:
        prompt = f"Commands F1:help, {fkey_string}\n"
        prompt += f"  {command_registry.get_help_text()}\n"
        prompt += "Type a number to see task details"
        selection = ""
        try:
            selection = ui.prompt_get_string(prompt, key_shortcuts, '|', ('o', 'O'), '/')
        except Exception as e:
            ui.error("Command execution", e)

        # Enable/Disable extra columns
        if selection in ("KEY_F2", "KEY_F3", "KEY_F4", "KEY_F5", "KEY_F6", "KEY_F7", "KEY_F8", "KEY_F9", "KEY_F10", "KEY_F11", "KEY_F12"):
            fkey = selection[4:]
            try:
                if fkey_to_column.get(fkey):
                    selected_column = fkey_to_column[fkey]
                    ui.prompt(f"Toggle column {selected_column}...")
                    extra_columns = view.extra_columns
                    if selected_column != "" and selected_column in possible_columns:
                        if selected_column not in extra_columns:
                            extra_columns[selected_column] = possible_columns[selected_column]
                        else:
                            del extra_columns[selected_column]
                    view.rebuild(extra_columns=extra_columns)
            except Exception as e:
                ui.error("Add extra columns", e)

        # Handle commands from registry
        elif selection in command_registry.commands:
            command = command_registry.get_command(selection)
            result = command.execute(
                ui=ui, 
                view=view, 
                jira=jira, 
                mygit=mygit, 
                mygithub=mygithub, 
                config=config,
                stdscr=stdscr
            )
            if result:  # If command returns True, exit the loop
                return

        # Show task view
        elif selection.isdigit():
            try:
                [row, issue] = ui.get_row(int(selection)-1)
                view.refresh(ViewMode.TASKVIEW, parent_issue=issue)
            except Exception as e:
                ui.error("Show task view", e)

        # Escape or enter will return to previous, cached view
        elif selection == "":
            if view.mode == ViewMode.TASKVIEW:
                view.previous()

if __name__ == "__main__":
    curses.initscr()
    curses.wrapper(main)
