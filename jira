#!/usr/bin/python
#scriptdoc: title="Curses based Jira team backlog/sprint", tags="bt,work,jira"
import curses
import argparse
from MyJira import MyJira
from MyGit import MyGit
from MyGithub import MyGithub
from MyJiraConfig import MyJiraConfig
from CursesTableView import CursesTableView
from JiraTableView import JiraTableView
from view_mode import ViewMode
from command_registry import CommandRegistry

# Load the config
config_file = MyJiraConfig()
if not config_file.exists():
    print("Configuration file not found, generating template...")
    print("Please edit the configuration file and generate required PAT tokens for jira and github")
    config_file.generate_template()
    print(f"Configuration file saved to: {config_file.get_location()}")
    input("Press any key to exit...")
    quit()
config = config_file.load()

# Global variables
jira = MyJira(config.get('jira'))
mygit = MyGit(config.get('git'))
mygithub = MyGithub(config.get('github')) if config.get('github')['token'] != "" else None
parser = argparse.ArgumentParser()
parser.add_argument("-s", "--sprint", help="Start in sprint mode", action="store_true")
parser.add_argument("-l", "--backlog", help="Start in backlog mode", action="store_true")
parser.add_argument("-B", "--board", help="Start in board mode, takes an index of the board to show", type=int)
parser.add_argument("-z", "--escalations", help="Start in escalations mode", action="store_true")
parser.add_argument("-w", "--windows-shared", help="Start in windows-shared mode", action="store_true")
args = parser.parse_args()

def main(stdscr):
    ui = CursesTableView(stdscr)
    ui.set_header_color(curses.COLOR_RED)
    ui.set_column_colors([curses.COLOR_RED, curses.COLOR_CYAN, curses.COLOR_YELLOW, curses.COLOR_BLUE, curses.COLOR_GREEN, curses.COLOR_MAGENTA, curses.COLOR_CYAN, curses.COLOR_YELLOW, curses.COLOR_BLUE, curses.COLOR_GREEN, curses.COLOR_MAGENTA])
    ui.enable_row_numbers()
    view = JiraTableView(ui, jira)

    # Initialize command registry
    command_registry = CommandRegistry()

    board = None
    if args.board:
        board = jira.get_boards()[args.board]

    # Get the backlog issues
    view.refresh(ViewMode.SPRINT if args.sprint
                 else ViewMode.ESCALATIONS if args.escalations
                 else ViewMode.WINDOWS_SHARED if args.windows_shared
                 else ViewMode.BOARD if args.board
                 else ViewMode.BACKLOG, params=board if args.board else None)

    possible_columns = jira.get_optional_fields()
    fkey_to_column = {}
    for i, possible_column in enumerate(possible_columns):
        fkey_to_column[f"F{i+2}"] = possible_column
    fkey_string = ''.join([f"{key}:{value.lower()} " for key, value in fkey_to_column.items()])

    # Get available shortcuts from command registry (only single-character ones for UI)
    key_shortcuts = command_registry.get_single_char_shortcuts()
    
    return run_ui_loop(stdscr, ui, view, command_registry, possible_columns, fkey_to_column, fkey_string, key_shortcuts)

def run_ui_loop(stdscr, ui, view, command_registry, possible_columns, fkey_to_column, fkey_string, key_shortcuts):
    while True:
        prompt = f"Commands F1:help, {fkey_string}\n"
        prompt += f"  {command_registry.get_help_text()}\n"
        prompt += "Type a number to see task details"
        selection = ""
        try:
            selection = ui.prompt_get_string(prompt, key_shortcuts, '|', ('o', 'O'), '/')
        except Exception as e:
            ui.error("Command execution", e)

        if selection in ("KEY_F2", "KEY_F3", "KEY_F4", "KEY_F5", "KEY_F6", "KEY_F7", "KEY_F8", "KEY_F9", "KEY_F10", "KEY_F11", "KEY_F12"):
            handle_fkey_columns(ui, view, possible_columns, fkey_to_column, selection)
        elif selection in command_registry.commands:
            result = handle_regular_commands(stdscr, ui, view, command_registry, selection)
            if result:  # If command returns True, exit the loop
                return

        # Show task view
        elif selection.isdigit():
            try:
                [row, issue] = ui.get_row(int(selection)-1)
                view.refresh(ViewMode.TASKVIEW, parent_issue=issue)
            except Exception as e:
                ui.error("Show task view", e)

        # Escape or enter will return to previous, cached view
        elif selection == "":
            if view.mode == ViewMode.TASKVIEW:
                view.previous(jira=jira)

def handle_regular_commands(stdscr, ui, view, command_registry, selection):
    command = command_registry.get_command(selection)
    result = command.execute(
                ui=ui, 
                view=view, 
                jira=jira, 
                mygit=mygit, 
                mygithub=mygithub, 
                config=config,
                stdscr=stdscr
            )
    
    return result

def handle_fkey_columns(ui, view, possible_columns, fkey_to_column, selection):
    fkey = selection[4:]
    try:
        if fkey_to_column.get(fkey):
            selected_column = fkey_to_column[fkey]
            ui.prompt(f"Toggle column {selected_column}...")
            extra_columns = view.extra_columns
            if selected_column != "" and selected_column in possible_columns:
                if selected_column not in extra_columns:
                    extra_columns[selected_column] = possible_columns[selected_column]
                else:
                    del extra_columns[selected_column]
            view.rebuild(extra_columns=extra_columns, jira=jira)
    except Exception as e:
        ui.error("Add extra columns", e)

if __name__ == "__main__":
    curses.initscr()
    curses.wrapper(main)
