#!/usr/bin/python3

import os
from MyJira import MyJira
from MyJiraConfig import MyJiraConfig
from JiraXrayIssue import JiraXrayIssue
from TkTableUi import TkTableUi
import webbrowser
import json
import os
import threading

class XrayUi:
    config_file = MyJiraConfig()
    backlog_mode = False
    issue = None

    def __init__(self):
        config = self.config_file.load()
        jira_config = config.get('jira')
        self.jira = MyJira(jira_config)
        team_name = jira_config.get('team_name')
        self.ui = TkTableUi("Current Sprint for " + team_name)
        self.ui.add_headers(('Issue', 'Summary'))

    def add_issues(self):
        self.issues = self.jira.get_sprint_issues() if not self.backlog_mode else self.jira.get_backlog_issues()
        for issue in self.issues:
            self.ui.add_row((issue.key, issue.fields.summary), issue)

    def on_refresh(self):
        self.ui.clear()
        self.add_issues()
        self.ui.refresh()

    def on_close(self):
        self.ui.close()

    def are_tests_created(self, thread, issue):
        if not thread.is_alive():
            self.ui.hide_progress_bar()
            self.ui.show_info_dialog("Tests created", f"Tests created for {issue._issueid}")
        else:
            self.ui.root.after(100, self.are_tests_created, thread, issue)

    def create_test_worker(self, issue, definitions, on_test_created):
        self.ui.show_progress_bar("Creating tests", len(definitions))
        thread = threading.Thread(target=issue.create_test_cases, args=(definitions, on_test_created))
        thread.start()
        self.ui.root.after(100, self.are_tests_created, thread, issue)

    def on_test_created(self, message):
        self.ui.update_progress(message)

    def on_create_tests(self, issue):
        xray_issue = JiraXrayIssue(issue.key, self.jira)
        definitions = xray_issue.parse_test_definitions()
        yes = self.ui.show_yesno_dialog("Create tests", f"Create {len(definitions)} tests for [{issue.key}] for repository folder \"{definitions.get_folder()}\"?")
        if yes:
            try:
                self.create_test_worker(xray_issue, definitions, self.on_test_created)
            except Exception as e:
                print(e)
                self.ui.show_error_dialog("Error", f"Error creating tests for {issue.key}: {e}")

    def on_create_test_template(self, issue):
        xray_issue = JiraXrayIssue(issue.key, self.jira)
        yes = self.ui.show_yesno_dialog("Test template", f"{issue.key} doesn't yet have any tests defined. Create test template?")
        if yes:
            try:
                xray_issue.create_test_template()
                self.ui.show_info_dialog("Test template created", f"Test template created for {issue.key}")
            except Exception as e:
                print(e)
                self.ui.show_error_dialog("Error", f"Error creating test template for {issue.key}: {e}")

    def on_right_click(self, issue):
        issue = next((x for x in self.issues if x.key == issue.key), None)
        xray_issue = JiraXrayIssue(issue, self.jira)
        if (not xray_issue.sprint_item_has_valid_tests()):
            self.ui.set_rightclick_item_enabled_by_name("Create testing template", True)
            self.ui.set_rightclick_item_enabled_by_name("Create tests", False)
        else:
            self.ui.set_rightclick_item_enabled_by_name("Create testing template", False)
            self.ui.set_rightclick_item_enabled_by_name("Create tests", True)

    def on_open_browser(self, issue):
        self.jira.browse_to(issue)

    def on_toggle_backlog(self):
        self.backlog_mode = not self.backlog_mode
        self.ui.set_window_title(("Backlog" if self.backlog_mode else "Current Sprint") + " for " + self.jira.team_name)
        self.show_backlog_buggon.config(text="Show Sprint" if self.backlog_mode else "Show Backlog")
        self.on_refresh()

    def initialize_controls(self):
        self.ui.add_button(label="Refresh", right=False, callback=self.on_refresh)
        self.show_backlog_buggon = self.ui.add_button(label="Show Backlog", right=False, callback=self.on_toggle_backlog)
        self.ui.add_button(label="Close", right=True, callback=self.on_close)
        self.ui.add_right_click_menu([("Create testing template", self.on_create_test_template), ("Create tests", self.on_create_tests), ("Open in Browser", self.on_open_browser)], self.on_right_click)

    def display(self):
        self.add_issues()
        self.ui.display(self.initialize_controls)

if __name__ == "__main__":
    xray_ui = XrayUi()
    xray_ui.display()

