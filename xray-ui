#!/usr/bin/python3

import os
from MyJira import MyJira
from MyJiraConfig import MyJiraConfig
from JiraXrayIssue import JiraXrayIssue
from TkTableUi import TkTableUi
import webbrowser
import json
import os
import threading

class XrayUi:
    config_file = MyJiraConfig()
    backlog_mode = False
    issue = None

    def __init__(self):
        if not self.config_file.exists():
            self.config_file.generate_template()
            self.ui = TkTableUi("Config needed")
            config_location = self.config_file.get_location()
            self.ui.show_error_dialog("A config template has been generated", f"Please fill in the config file at {config_location} and restart the application")
            quit()

        config = self.config_file.load()
        jira_config = config.get('jira')
        self.jira = MyJira(jira_config)
        self.team_name = jira_config.get('default_team')
        self.toolname = "Xray Test Creator - "
        self.ui = TkTableUi(self.toolname + "Current Sprint for " + self.team_name)
        self.ui.add_headers(('Issue', 'Summary'))

    def add_issues(self):
        self.issues = self.jira.get_sprint_issues() if not self.backlog_mode else self.jira.get_backlog_issues()
        for issue in self.issues:
            self.ui.add_row((issue.key, issue.fields.summary), issue)

    def on_refresh(self):
        self.ui.clear()
        self.add_issues()
        self.ui.refresh()

    def on_close(self):
        self.ui.close()

    def are_tests_created(self, thread, xray_issue):
        if not thread.is_alive():
            self.ui.hide_progress_bar()
            test_plan_name = xray_issue.get_test_plan_name()
            if test_plan_name is None:
                self.ui.show_info_dialog("Test plan not created", f"Tests created for {xray_issue._issueid}. No test plan declared in the issue.")
                return
            yesno = self.ui.show_yesno_dialog(f"Create test plan", f"Tests created for {xray_issue._issueid}. Add the new tests to the {test_plan_name} solution test plan?")
            if yesno:
                (definitions, test_cases) = self.created_tests
                test_ids = [test.id for test in test_cases]
                if (xray_issue.create_update_test_plan(definitions, test_ids)):
                    self.ui.show_info_dialog("Test plan created", f"Test plan {test_plan_name} created with {len(test_ids)} tests")
                else:
                    self.ui.show_info_dialog("Test plan updated", f"Test plan {test_plan_name} updated with {len(test_ids)} tests")
        else:
            self.ui.root.after(100, self.are_tests_created, thread, xray_issue)

    def create_tests_worker(self, xray_issue, definitions, on_test_created):
        self.created_tests = (definitions, xray_issue.create_test_cases(definitions, on_test_created))

    def create_tests(self, xray_issue, definitions, on_test_created):
        self.ui.show_progress_bar("Creating tests", len(definitions))
        thread = threading.Thread(target=self.create_tests_worker, args=(xray_issue, definitions, on_test_created))
        thread.start()
        self.ui.root.after(100, self.are_tests_created, thread, xray_issue)

    def on_test_created(self, message):
        self.ui.update_progress(message)

    def on_create_tests(self, issue):
        issue = next((x for x in self.issues if x.key == issue.key), None)
        xray_issue = JiraXrayIssue(issue, self.jira)
        definitions = xray_issue.parse_test_definitions()
        yes = self.ui.show_yesno_dialog("Create tests", f"Create {len(definitions)} tests for [{issue.key}] for repository folder \"{definitions.get_folder()}\"?")
        if yes:
            try:
                self.create_tests(xray_issue, definitions, self.on_test_created)
            except Exception as e:
                print(e)
                self.ui.show_error_dialog("Error", f"Error creating tests for {issue.key}: {e}")

    def on_create_test_template(self, issue):
        issue = next((x for x in self.issues if x.key == issue.key), None)
        xray_issue = JiraXrayIssue(issue, self.jira)
        yes = self.ui.show_yesno_dialog("Test template", f"{issue.key} doesn't yet have any tests defined. Create test template?")
        if yes:
            try:
                xray_issue.create_test_template()
                self.ui.show_info_dialog("Test template created", f"Test template created for {issue.key}")
                yesno = self.ui.show_yesno_dialog("Open in browser", f"Open {issue.key} in browser?")
                if yesno:
                    self.jira.browse_to(issue)
            except Exception as e:
                print(e)
                self.ui.show_error_dialog("Error", f"Error creating test template for {issue.key}: {e}")

    def on_delete_tests(self, issue):
        issue = next((x for x in self.issues if x.key == issue.key), None)
        xray_issue = JiraXrayIssue(issue, self.jira)
        yes = self.ui.show_yesno_dialog("Delete all tests", f"Are you certain you want to delete ALL tests for {issue.key}?")
        if yes:
            try:
                xray_issue.delete_tests()
                self.ui.show_info_dialog("Tests deleted", f"All tests deleted for {issue.key}")
            except Exception as e:
                print(e)
                self.ui.show_error_dialog("Error", f"Error deleting tests for {issue.key}: {e}")

    def on_show_test_info(self, issue):
        issue = next((x for x in self.issues if x.key == issue.key), None)
        xray_issue = JiraXrayIssue(issue, self.jira)
        test_info = xray_issue.get_test_info()
        self.ui.show_text_dialog("Test Info", test_info)

    def on_right_click(self, issue):
        if issue is None:
            self.ui.set_rightclick_item_enabled_by_name("Add testing template", False)
            self.ui.set_rightclick_item_enabled_by_name("Create tests", False)
            self.ui.set_rightclick_item_enabled_by_name("Show test info", False)
            self.ui.set_rightclick_item_enabled_by_name("Open in browser", False)
            self.ui.set_rightclick_item_enabled_by_name("Delete all tests", False)
            return

        issue = next((x for x in self.issues if x.key == issue.key), None)
        xray_issue = JiraXrayIssue(issue, self.jira)
        self.ui.set_rightclick_item_enabled_by_name("Open in browser", True)
        if (not xray_issue.sprint_item_has_valid_tests()):
            self.ui.set_rightclick_item_enabled_by_name("Add testing template", True)
            self.ui.set_rightclick_item_enabled_by_name("Create tests", False)
            self.ui.set_rightclick_item_enabled_by_name("Delete all tests", False)
            self.ui.set_rightclick_item_enabled_by_name("Show test info", False)
        else:
            self.ui.set_rightclick_item_enabled_by_name("Add testing template", False)
            self.ui.set_rightclick_item_enabled_by_name("Create tests", True)
            self.ui.set_rightclick_item_enabled_by_name("Delete all tests", True)
            self.ui.set_rightclick_item_enabled_by_name("Show test info", True)

    def on_open_browser(self, issue):
        self.jira.browse_to(issue)

    def on_toggle_backlog(self):
        self.backlog_mode = not self.backlog_mode
        self.ui.set_window_title(self.toolname + ("Backlog" if self.backlog_mode else "Current Sprint") + " for " + self.team_name)
        self.show_backlog_buggon.config(text="Show Sprint" if self.backlog_mode else "Show Backlog")
        self.on_refresh()

    def on_team_switched(self, team_name):
        self.jira.set_team(team_name)
        self.team_name = team_name
        self.ui.set_window_title(self.toolname + ("Backlog" if self.backlog_mode else "Current Sprint") + " for " + team_name)
        self.on_refresh()

    def initialize_controls(self):
        self.ui.add_dropdown(self.jira.get_teams(), self.team_name, self.on_team_switched)
        self.ui.add_button(label="Refresh", right=False, callback=self.on_refresh)
        self.show_backlog_buggon = self.ui.add_button(label="Show Backlog", right=False, callback=self.on_toggle_backlog)
        self.ui.add_button(label="Close", right=True, callback=self.on_close)
        self.ui.add_right_click_menu([("Add testing template", self.on_create_test_template),
                                      ("Create tests", self.on_create_tests),
                                      ("Delete all tests", self.on_delete_tests),
                                      ("Show test info", self.on_show_test_info),
                                      ("Open in browser", self.on_open_browser)], self.on_right_click)
        self.ui.set_column_widths([100, 800])
        dir_path = os.path.dirname(os.path.realpath(__file__))
        icon_path = os.path.join(dir_path, "xray.ico")
        self.ui.set_icon(icon_path)

    def display(self):
        self.add_issues()
        self.ui.display(self.initialize_controls)

if __name__ == "__main__":
    xray_ui = XrayUi()
    xray_ui.display()

