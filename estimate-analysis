#!/usr/bin/python3

# scriptdoc: title="Gather stats about the last two weeks", tags="bt,work,jira"
import json
import argparse
import sys
import time
import os
from datetime import datetime
from MyJira import MyJira
from MyJira import MyJiraIssue
from MyGit import MyGit
from MyGithub import MyGithub
from MyJiraConfig import MyJiraConfig

def load_configuration():
    config_file = MyJiraConfig()
    if not config_file.exists():
        print("Configuration file not found, generating template...")
        config_file.generate_template()
        print(f"Configuration file saved to: {config_file.get_location()}")
        input("Press any key to exit...")
        quit()
    return config_file.load()

def print_to_csv(csv_file, data):
    if not csv_file:
        print(data)
        return
    with open(csv_file, 'a') as f:
        f.write(f"{data}\n")

def check_sprint(jira, sprints, csv_file=None):
    print_to_csv(csv_file, "Issue,Sprint,Estimate,Duration")

    # Issues can run accross sprints so must dedupe
    issue_dedupe_dictionary = {}

    for (sprint_name, sprint) in sprints:
        for issue in sprint:
            if issue.key in issue_dedupe_dictionary:
                continue
            issue_dedupe_dictionary[issue.key] = True
            points = MyJiraIssue(issue).story_points
            if (points == None):
                continue
            histories = issue.changelog.histories
            histories.reverse()

            startTime = None
            endTime = None
            for history in issue.changelog.histories:
                for item in history.items:
                    if item.field != 'status':
                        continue

                    stateTo = item.toString
                    stateFrom = item.fromString

                    if stateFrom in ['New', 'Ready'] and stateTo in ['In Progress', 'Development', 'Code Review', 'Testing']:
                        startTime = datetime.strptime(history.created, '%Y-%m-%dT%H:%M:%S.%f%z')
                    elif stateTo in ['Done']:
                        endTime = datetime.strptime(history.created, '%Y-%m-%dT%H:%M:%S.%f%z')
                        break

            if startTime == None or endTime == None:
                continue

            duration = round((endTime - startTime).total_seconds() / 86400, 2)
            print_to_csv(csv_file, f"{issue},{sprint_name},{points},{duration}")

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--csv", help="Output file name")
    parser.add_argument("-p", "--previous", help="Output previous N sprint")
    args = parser.parse_args()
    return args

def init():
    config = load_configuration()
    jira = MyJira(config.get('jira'))
    mygit = MyGit(config.get('git'))
    mygithub = MyGithub(config.get('github')) if config.get('github').get('token') else None
    args = parse_args()
    return jira, mygit, mygithub, args

def main():
    jira, mygit, mygithub, args = init()

    sprints = []
    if args.previous:
        previous_sprints = jira.list_closed_sprints()
        previous_sprints = previous_sprints[-int(args.previous):]
        for sprint in previous_sprints:
            print (f"Processing sprint {sprint.name}")
            sprints.append((sprint.name, jira.get_sprint_by_name(sprint.name, changelog=True)))
    sprints.append(("Current", jira.get_sprint_issues(changelog=True)))

    if args.csv and os.path.exists(args.csv):
        os.remove(args.csv)

    check_sprint(jira, sprints, args.csv)

if __name__ == "__main__":
    main()

