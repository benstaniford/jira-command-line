#!/usr/bin/python3

# scriptdoc: title="Gather stats about the last two weeks", tags="bt,work,jira"
import json
import argparse
import sys
import time
import os
from datetime import datetime
from MyJira import MyJira
from MyJira import MyJiraIssue
from MyGit import MyGit
from MyGithub import MyGithub
from MyJiraConfig import MyJiraConfig

def load_configuration():
    config_file = MyJiraConfig()
    if not config_file.exists():
        print("Configuration file not found, generating template...")
        config_file.generate_template()
        print(f"Configuration file saved to: {config_file.get_location()}")
        input("Press any key to exit...")
        quit()
    return config_file.load()

def check_sprint(jira):
    sprint = jira.get_sprint_issues(changelog=True)

    for issue in sprint:
        print(issue)
        for history in issue.changelog.histories:
            for item in history.items:
                # Continue if it's not a status change
                if item.field != 'status':
                    continue
                print(f"Field name: {item.field}") # field to which the change happened
                print(f"Changed to: {item.toString}") # new value, item.to might be better in some cases depending on your needs.
                print(f"Changed from: {item.fromString}") # old value, item.from might be better in some cases depending on your needs.
                action_time = datetime.strptime(history.created, '%Y-%m-%dT%H:%M:%S.%f%z')
                print(f"Date: {action_time}")
                print()
        #transitions = jira.transitions(issue)
        #for transition in transitions:
        #    print(transition)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--csv", help="Output in CSV format")
    parser.add_argument("-e", "--email", help="Email the report to this address")
    args = parser.parse_args()
    return args

def init():
    config = load_configuration()
    jira = MyJira(config.get('jira'))
    mygit = MyGit(config.get('git'))
    mygithub = MyGithub(config.get('github')) if config.get('github').get('token') else None
    args = parse_args()
    return jira, mygit, mygithub, args

def main():
    jira, mygit, mygithub, args = init()
    check_sprint(jira)

if __name__ == "__main__":
    main()

